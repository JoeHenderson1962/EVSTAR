<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.FileProviders.Composite</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents">
            <summary>
            Represents the result of a call composition of <see cref="M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)"/>
            for a list of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> and a path.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.#ctor(System.Collections.Generic.IList{Microsoft.Extensions.FileProviders.IFileProvider},System.String)">
            <summary>
            Creates a new instance of <see cref="T:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents"/> to represents the result of a call composition of
            <see cref="M:Microsoft.Extensions.FileProviders.IFileProvider.GetDirectoryContents(System.String)"/>.
            </summary>
            <param name="fileProviders">The list of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> for which the results have to be composed.</param>
            <param name="subpath">The path.</param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.GetEnumerator">
            <summary>
            Creates an enumerator for all files in all providers given.
            Ensures each item in the collection is distinct.
            </summary>
            <returns>An enumerator over all files in all given providers</returns>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.Composite.CompositeDirectoryContents.Exists">
            <summary>
            True if any given providers exists
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.FileProviders.CompositeFileProvider">
            <summary>
            Looks up files using a collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(Microsoft.Extensions.FileProviders.IFileProvider[])">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.FileProviders.CompositeFileProvider" /> class using a collection of file provider.
            </summary>
            <param name="fileProviders">The collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Extensions.FileProviders.IFileProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.FileProviders.CompositeFileProvider" /> class using a collection of file provider.
            </summary>
            <param name="fileProviders">The collection of <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /></param>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetFileInfo(System.String)">
            <summary>
            Locates a file at the given path.
            </summary>
            <param name="subpath">The path that identifies the file. </param>
            <returns>The file information. Caller must check Exists property. This will be the first existing <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> returned by the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> or a not found <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> if no existing files is found.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.GetDirectoryContents(System.String)">
            <summary>
            Enumerate a directory at the given path, if any.
            </summary>
            <param name="subpath">The path that identifies the directory</param>
            <returns>Contents of the directory. Caller must check Exists property.
            The content is a merge of the contents of the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>.
            When there is multiple <see cref="T:Microsoft.Extensions.FileProviders.IFileInfo"/> with the same Name property, only the first one is included on the results.</returns>
        </member>
        <member name="M:Microsoft.Extensions.FileProviders.CompositeFileProvider.Watch(System.String)">
            <summary>
            Creates a <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> for the specified <paramref name="pattern"/>.
            </summary>
            <param name="pattern">Filter string used to determine what files or folders to monitor. Example: **/*.cs, *.*, subFolder/**/*.cshtml.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Primitives.IChangeToken"/> that is notified when a file matching <paramref name="pattern"/> is added, modified or deleted.
            The change token will be notified when one of the change token returned by the provided <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> will be notified.</returns>
        </member>
        <member name="P:Microsoft.Extensions.FileProviders.CompositeFileProvider.FileProviders">
            <summary>
            Gets the list of configured <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider" /> instances.
            </summary>
        </member>
        <member name="M:System.ThrowHelper.ThrowIfNull(System.Object,System.String)">
            <summary>Throws an <see cref="T:System.ArgumentNullException"/> if <paramref name="argument"/> is null.</summary>
            <param name="argument">The reference type argument to validate as non-null.</param>
            <param name="paramName">The name of the parameter with which <paramref name="argument"/> corresponds.</param>
        </member>
        <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
            <summary>
            Attribute used to indicate a source generator should create a function for marshalling
            arguments instead of relying on the runtime to generate an equivalent marshalling function at run-time.
            </summary>
            <remarks>
            This attribute is meaningless if the source generator associated with it is not enabled.
            The current built-in source generator only supports C# and only supplies an implementation when
            applied to static, partial, non-generic methods.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute"/>.
            </summary>
            <param name="libraryName">Name of the library containing the import.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
            <summary>
            Gets the name of the library containing the import.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
            <summary>
            Gets or sets the name of the entry point to be called.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
            <summary>
            Gets or sets how to marshal string arguments to the method.
            </summary>
            <remarks>
            If this field is set to a value other than <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />,
            <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" /> must not be specified.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> used to control how string arguments to the method are marshalled.
            </summary>
            <remarks>
            If this field is specified, <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling" /> must not be specified
            or must be set to <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
            <summary>
            Gets or sets whether the callee sets an error (SetLastError on Windows or errno
            on other platforms) before returning from the attributed method.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StringMarshalling">
            <summary>
            Specifies how strings should be marshalled for generated p/invokes
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Custom">
            <summary>
            Indicates the user is suppling a specific marshaller in <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf8">
            <summary>
            Use the platform-provided UTF-8 marshaller.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf16">
            <summary>
            Use the platform-provided UTF-16 marshaller.
            </summary>
        </member>
    </members>
</doc>
